{"version":3,"sources":["images/slide_2.jpg","images/slide_3.jpg","images/slide_4.jpg","component/slideshow/slideshow.component.jsx","component/dropdown_box/dropdown_box.component.jsx","component/header/header.component.jsx","component/paginate/pagebutton/pagebutton.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","slideImages","slide_2","slide_3","slide_4","properties","duration","transitionDuration","infinite","indicators","arrows","onChange","oldIndex","newIndex","console","log","Slideshow","className","style","DropDownBox","Header","props","handleClick","setState","state","hidden","language","onClick","this","React","Component","Pagination","pageCurr","totalPage","config","pages","push","key","i","go","bind","Pages","create","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,uTCMrCC,G,MAAa,CACjBC,IACAC,IACAC,MAGIC,EAAa,CACjBC,SAAU,IACVC,mBAAoB,IACpBC,UAAU,EACVC,YAAY,EACZC,QAAQ,EACRC,SAAU,SAACC,EAAUC,GACnBC,QAAQC,IAAR,gCAAqCH,EAArC,eAAoDC,MA4BzCG,EAxBG,WACd,OACE,yBAAKC,UAAU,mBACb,kBAAC,QAAUZ,EACT,yBAAKY,UAAU,cACb,yBAAKC,MAAO,CAAC,gBAAkB,OAAlB,OAA0BjB,EAAY,GAAtC,OACX,2CAGJ,yBAAKgB,UAAU,cACb,yBAAKC,MAAO,CAAC,gBAAkB,OAAlB,OAA0BjB,EAAY,GAAtC,OACX,2CAGJ,yBAAKgB,UAAU,cACb,yBAAKC,MAAO,CAAC,gBAAkB,OAAlB,OAA0BjB,EAAY,GAAtC,OACX,8C,eCrBCkB,EAbK,kBAChB,yBAAKF,UAAU,gBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMA,UAAU,WAAhB,4BAGA,kBAAC,IAAD,CAAMA,UAAU,WAAhB,+B,mCC8BGG,G,kBAnCX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAOVC,YAAc,WACV,EAAKC,UAAS,SAAAC,GAAK,MAAK,CACpBC,QAAU,EAAKD,MAAMC,YAPzB,EAAKD,MAAQ,CACTC,QAAQ,EACRC,SAAU,IALA,E,sEAcd,OACI,yBAAKT,UAAU,UACX,0BAAMA,UAAU,SAAQU,QAASC,KAAKN,aAAtC,sBAEIM,KAAKJ,MAAMC,OAAS,KAAM,kBAAC,EAAD,MAE9B,yBAAKR,UAAU,WACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMA,UAAU,UAAhB,gBACA,kBAAC,IAAD,CAAMA,UAAU,UAAhB,4BACA,kBAAC,IAAD,CAAMA,UAAU,UAAhB,4BACA,kBAAC,IAAD,CAAMA,UAAU,UAAhB,4BACA,0BAAMA,UAAU,UAAhB,uB,GA3BHY,IAAMC,YCHNC,G,kBACjB,WAAYV,GAAO,IAAD,8BACd,4CAAMA,KACDG,MAAO,CACRQ,SAAS,GAHC,E,sEAOT,IAEDC,EACAL,KAAKP,MAAMa,OADXD,UAIAD,EACAJ,KAAKJ,MADLQ,SAGAG,EAAQ,GACZA,EAAMC,KAAK,wBAAIC,IAAK,GAAT,uBACX,IAAI,IAAIC,EAAI,EAAEA,GAAKL,EAAWK,IAE1BH,EAAMC,KAAK,wBAAIT,QAAYC,KAAKW,GAAGC,KAAKZ,KAAKU,GAAKrB,UAAce,IAAaM,EAAI,SAAU,GAAKD,IAAKC,GAAIA,IAI7G,OAFAH,EAAMC,KAAK,wBAAIC,IAAKJ,EAAY,GAArB,uBAEJE,I,yBAGRH,GACCJ,KAAKL,SAAS,CACVS,e,+BAKJ,IAAMS,EAAQb,KAAKc,OAAOF,KAAKZ,KAAjBA,GACd,OACI,yBAAKX,UAAY,cACb,wBAAIA,UAAc,QACZwB,Q,GAvCkBX,cCiBzBa,MAXf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,MACA,oDACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYiB,OAAU,CAACD,UAAU,OCFnBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6f48be5a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/slide_2.f1707450.jpg\";","module.exports = __webpack_public_path__ + \"static/media/slide_3.05970a4b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/slide_4.df7306d3.jpg\";","import React from 'react';\r\nimport { Slide } from 'react-slideshow-image';\r\nimport slide_2 from '../../images/slide_2.jpg';\r\nimport slide_3 from '../../images/slide_3.jpg';\r\nimport slide_4 from '../../images/slide_4.jpg';\r\nimport './slideshow.styles.css'\r\nconst slideImages =[\r\n  slide_2,\r\n  slide_3,\r\n  slide_4\r\n];\r\n\r\nconst properties = {\r\n  duration: 5000,\r\n  transitionDuration: 500,\r\n  infinite: true,\r\n  indicators: true,\r\n  arrows: true,\r\n  onChange: (oldIndex, newIndex) => {\r\n    console.log(`slide transition from ${oldIndex} to ${newIndex}`);\r\n  }\r\n}\r\n \r\nconst Slideshow = () => {\r\n    return (\r\n      <div className=\"slide-container\">\r\n        <Slide {...properties}>\r\n          <div className=\"each-slide\">\r\n            <div style={{'backgroundImage': `url(${slideImages[0]})`}}>\r\n              <span>Slide 1</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"each-slide\">\r\n            <div style={{'backgroundImage': `url(${slideImages[1]})`}}>\r\n              <span>Slide 2</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"each-slide\">\r\n            <div style={{'backgroundImage': `url(${slideImages[2]})`}}>\r\n              <span>Slide 3</span>\r\n            </div>\r\n          </div>\r\n        </Slide>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Slideshow;","import React from 'react';\r\nimport './dropdown_box.styles.css';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst DropDownBox = () => (\r\n    <div className='dropdown-box'>\r\n        <BrowserRouter>\r\n            <Link className='sublink'>\r\n                饭团外卖\r\n            </Link>\r\n            <Link className='sublink'>\r\n                饭团点评\r\n            </Link>\r\n        </BrowserRouter>\r\n    </div>\r\n)\r\n\r\nexport default DropDownBox;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport DropDownBox from '../dropdown_box/dropdown_box.component';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport './header.styles.css';\r\nclass Header extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            hidden: true,\r\n            language: ''\r\n        };\r\n    }\r\n    handleClick = () =>{\r\n        this.setState(state => ({\r\n            hidden: ! this.state.hidden\r\n        }));\r\n    }\r\n    render() {\r\n        return(\r\n            <div className='header'>\r\n                <span className='option'onClick={this.handleClick}>大饭团</span>\r\n                {\r\n                    this.state.hidden ? null: <DropDownBox />\r\n                }\r\n                <div className='options'>\r\n                    <BrowserRouter>\r\n                        <Link className='option'>首页</Link>\r\n                        <Link className='option'>关于饭团</Link>\r\n                        <Link className='option'>媒体新闻</Link>\r\n                        <Link className='option'>招聘频道</Link>\r\n                        <span className='option'>中文</span>\r\n                    </BrowserRouter>\r\n                    \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React,{ Component } from \"react\";\r\nimport style from \"./pagebutton.styles.scss\";\r\nexport default class Pagination extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state= {\r\n            pageCurr:1,\r\n        }\r\n    }\r\n\r\n    create(){\r\n        const {\r\n            totalPage,\r\n        } = this.props.config;\r\n\r\n        const {\r\n            pageCurr,\r\n        } = this.state;\r\n\r\n        let pages = [];\r\n        pages.push(<li key={0}>上一页</li>)\r\n        for(let i = 1;i <= totalPage; i++){\r\n            // 点击页码时调用 go 方法，根据 state 判断是否应用 active 样式\r\n            pages.push(<li onClick = { this.go.bind(this,i) } className = { pageCurr === i ? \"active\": \"\" } key={i}>{i}</li>)\r\n        }\r\n        pages.push(<li key={totalPage + 1}>下一页</li>)\r\n\r\n        return pages;\r\n    }\r\n\r\n    go(pageCurr){\r\n        this.setState({\r\n            pageCurr\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const Pages = this.create.bind(this)();\r\n        return(\r\n            <div className = \"pagination\">\r\n                <ul className = { \"page\" }>\r\n                    { Pages }\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// import React from 'react';\r\n\r\n// class pageButton extends React.Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.setNext=this.setNext.bind(this);\r\n//         this.setUp=this.setUp.bind(this);\r\n//         this.state={\r\n//             num: 0,\r\n//             pagenum:this.props.current\r\n//         }\r\n//     }\r\n\r\n//     //下一页\r\n//     setNext(){\r\n//         if(this.state.pagenum < this.props.totalPage){\r\n//             this.setState({\r\n//                 num:this.state.num + this.props.pageSize,\r\n//                 pagenum:this.state.pagenum + 1\r\n//             },function () {\r\n//                 console.log(this.state)\r\n//                 this.props.pageNext(this.state.num)\r\n//             })\r\n//         }\r\n//     }\r\n\r\n//     //上一页\r\n//     setUp(){\r\n//         if(this.state.pagenum > 1){\r\n//             this.setState({\r\n//                 num:this.state.num - this.props.pageSize,\r\n//                 pagenum:this.state.pagenum - 1\r\n//             },function () {\r\n//                 console.log(this.state)\r\n//                 this.props.pageNext(this.state.num)\r\n//             })\r\n//         }\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <div className=\"change_page\">\r\n//                 <span onClick={ this.setUp } >上一页</span>\r\n//                 <span>{ this.state.pagenum }页/ { this.props.totalPage }页</span>\r\n//                 <span onClick={ this.setNext }>下一页</span>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n","import React from 'react';\nimport {Switch,Route} from 'react-router-dom';\nimport './App.css';\nimport Slideshow from './component/slideshow/slideshow.component';\nimport DropDownBox from './component/dropdown_box/dropdown_box.component';\nimport Header from './component/header/header.component';\n// import pageButton from './component/paginate/pagebutton/pagebutton.component';\nimport Pagination from './component/paginate/pagebutton/pagebutton.component';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <h1>Fantuan 团建</h1>\n      <Slideshow />\n      <Pagination config = {{totalPage:7}}></Pagination>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}