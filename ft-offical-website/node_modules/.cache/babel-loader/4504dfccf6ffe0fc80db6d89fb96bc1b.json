{"ast":null,"code":"import { filterProps, createError } from '../utils';\nconst LIST_FORMAT_OPTIONS = ['localeMatcher', 'type', 'style'];\nconst now = Date.now();\n\nfunction generateToken(i) {\n  return `${now}_${i}_${now}`;\n}\n\nexport function formatList({\n  locale,\n  onError\n}, getListFormat, values, options = {}) {\n  const ListFormat = Intl.ListFormat;\n\n  if (!ListFormat) {\n    onError(createError(`Intl.ListFormat is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-listformat\"\n`));\n  }\n\n  const filteredOptions = filterProps(options, LIST_FORMAT_OPTIONS);\n\n  try {\n    const richValues = {};\n    const serializedValues = values.map((v, i) => {\n      if (typeof v === 'object') {\n        const id = generateToken(i);\n        richValues[id] = v;\n        return id;\n      }\n\n      return String(v);\n    });\n\n    if (!Object.keys(richValues).length) {\n      return getListFormat(locale, filteredOptions).format(serializedValues);\n    }\n\n    const parts = getListFormat(locale, filteredOptions).formatToParts(serializedValues);\n    return parts.reduce((all, el) => {\n      const val = el.value;\n\n      if (richValues[val]) {\n        all.push(richValues[val]);\n      } else if (typeof all[all.length - 1] === 'string') {\n        all[all.length - 1] += val;\n      } else {\n        all.push(val);\n      }\n\n      return all;\n    }, []);\n  } catch (e) {\n    onError(createError('Error formatting list.', e));\n  }\n\n  return values;\n}","map":{"version":3,"sources":["/Users/chengpeng/workspace/Ft-Official-Website/ft-offical-website/node_modules/react-intl/lib/formatters/list.js"],"names":["filterProps","createError","LIST_FORMAT_OPTIONS","now","Date","generateToken","i","formatList","locale","onError","getListFormat","values","options","ListFormat","Intl","filteredOptions","richValues","serializedValues","map","v","id","String","Object","keys","length","format","parts","formatToParts","reduce","all","el","val","value","push","e"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,UAAzC;AACA,MAAMC,mBAAmB,GAAG,CACxB,eADwB,EAExB,MAFwB,EAGxB,OAHwB,CAA5B;AAKA,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;;AACA,SAASE,aAAT,CAAuBC,CAAvB,EAA0B;AACtB,SAAQ,GAAEH,GAAI,IAAGG,CAAE,IAAGH,GAAI,EAA1B;AACH;;AACD,OAAO,SAASI,UAAT,CAAoB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAApB,EAAyCC,aAAzC,EAAwDC,MAAxD,EAAgEC,OAAO,GAAG,EAA1E,EAA8E;AACjF,QAAMC,UAAU,GAAGC,IAAI,CAACD,UAAxB;;AACA,MAAI,CAACA,UAAL,EAAiB;AACbJ,IAAAA,OAAO,CAACR,WAAW,CAAE;;CAAF,CAAZ,CAAP;AAGH;;AACD,QAAMc,eAAe,GAAGf,WAAW,CAACY,OAAD,EAAUV,mBAAV,CAAnC;;AACA,MAAI;AACA,UAAMc,UAAU,GAAG,EAAnB;AACA,UAAMC,gBAAgB,GAAGN,MAAM,CAACO,GAAP,CAAW,CAACC,CAAD,EAAIb,CAAJ,KAAU;AAC1C,UAAI,OAAOa,CAAP,KAAa,QAAjB,EAA2B;AACvB,cAAMC,EAAE,GAAGf,aAAa,CAACC,CAAD,CAAxB;AACAU,QAAAA,UAAU,CAACI,EAAD,CAAV,GAAiBD,CAAjB;AACA,eAAOC,EAAP;AACH;;AACD,aAAOC,MAAM,CAACF,CAAD,CAAb;AACH,KAPwB,CAAzB;;AAQA,QAAI,CAACG,MAAM,CAACC,IAAP,CAAYP,UAAZ,EAAwBQ,MAA7B,EAAqC;AACjC,aAAOd,aAAa,CAACF,MAAD,EAASO,eAAT,CAAb,CAAuCU,MAAvC,CAA8CR,gBAA9C,CAAP;AACH;;AACD,UAAMS,KAAK,GAAGhB,aAAa,CAACF,MAAD,EAASO,eAAT,CAAb,CAAuCY,aAAvC,CAAqDV,gBAArD,CAAd;AACA,WAAOS,KAAK,CAACE,MAAN,CAAa,CAACC,GAAD,EAAMC,EAAN,KAAa;AAC7B,YAAMC,GAAG,GAAGD,EAAE,CAACE,KAAf;;AACA,UAAIhB,UAAU,CAACe,GAAD,CAAd,EAAqB;AACjBF,QAAAA,GAAG,CAACI,IAAJ,CAASjB,UAAU,CAACe,GAAD,CAAnB;AACH,OAFD,MAGK,IAAI,OAAOF,GAAG,CAACA,GAAG,CAACL,MAAJ,GAAa,CAAd,CAAV,KAA+B,QAAnC,EAA6C;AAC9CK,QAAAA,GAAG,CAACA,GAAG,CAACL,MAAJ,GAAa,CAAd,CAAH,IAAuBO,GAAvB;AACH,OAFI,MAGA;AACDF,QAAAA,GAAG,CAACI,IAAJ,CAASF,GAAT;AACH;;AACD,aAAOF,GAAP;AACH,KAZM,EAYJ,EAZI,CAAP;AAaH,GA3BD,CA4BA,OAAOK,CAAP,EAAU;AACNzB,IAAAA,OAAO,CAACR,WAAW,CAAC,wBAAD,EAA2BiC,CAA3B,CAAZ,CAAP;AACH;;AACD,SAAOvB,MAAP;AACH","sourcesContent":["import { filterProps, createError } from '../utils';\nconst LIST_FORMAT_OPTIONS = [\n    'localeMatcher',\n    'type',\n    'style',\n];\nconst now = Date.now();\nfunction generateToken(i) {\n    return `${now}_${i}_${now}`;\n}\nexport function formatList({ locale, onError }, getListFormat, values, options = {}) {\n    const ListFormat = Intl.ListFormat;\n    if (!ListFormat) {\n        onError(createError(`Intl.ListFormat is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-listformat\"\n`));\n    }\n    const filteredOptions = filterProps(options, LIST_FORMAT_OPTIONS);\n    try {\n        const richValues = {};\n        const serializedValues = values.map((v, i) => {\n            if (typeof v === 'object') {\n                const id = generateToken(i);\n                richValues[id] = v;\n                return id;\n            }\n            return String(v);\n        });\n        if (!Object.keys(richValues).length) {\n            return getListFormat(locale, filteredOptions).format(serializedValues);\n        }\n        const parts = getListFormat(locale, filteredOptions).formatToParts(serializedValues);\n        return parts.reduce((all, el) => {\n            const val = el.value;\n            if (richValues[val]) {\n                all.push(richValues[val]);\n            }\n            else if (typeof all[all.length - 1] === 'string') {\n                all[all.length - 1] += val;\n            }\n            else {\n                all.push(val);\n            }\n            return all;\n        }, []);\n    }\n    catch (e) {\n        onError(createError('Error formatting list.', e));\n    }\n    return values;\n}\n"]},"metadata":{},"sourceType":"module"}