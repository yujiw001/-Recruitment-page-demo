{"ast":null,"code":"import React from 'react';\nconst utils = {\n  testRegex: (value, regex) => value.toString().match(regex),\n  rules: {\n    required: {\n      message: 'The :attribute field is required',\n      rule: val => utils.testRegex(val, /.+/)\n    },\n    max: {\n      message: 'The :attribute may not be greater than :max characters',\n      rule: (val, options) => val.length <= options[0],\n      messageReplace: (message, options) => message.replace(':max', options[0])\n    },\n    min: {\n      message: 'The :attribute may not be greater than :mix characters',\n      rule: (val, options) => val.length >= options[0],\n      messageReplace: (message, options) => message.replace(':min', options[0])\n    },\n    email: {\n      message: 'The :attribute must be a valid email address',\n      rule: val => utils.testRegex(val, /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i)\n    },\n    number: {\n      message: 'The :attribute must be a number',\n      rule: val => utils.testRegex(val, /^\\d+.?\\d*$/)\n    },\n    phone: {\n      message: 'The :attribute must be a valid phone number',\n      rule: val => utils.testRegex(val, /^\\d{10}/)\n      /* 手机号段：/^1[3|5|7|8]\\d{9}/ */\n\n    },\n    url: {\n      message: 'The :attribute must be a valid url',\n      rule: val => utils.testRegex(val, /^(https?|ftp):\\/\\/(-\\.)?([^\\s/?\\.#-]+\\.?)+(\\/[^\\s]*)?$/i)\n    },\n    accepted: {\n      message: 'The :attribute must be a accepted',\n      rule: val => val === true\n    }\n  }\n};\n\nclass ReactValidator {\n  constructor() {\n    this.fields = [];\n    this.rules = utils.rules;\n    this.showMessage = false;\n  }\n\n  hideMessages() {\n    this.showMessage = false;\n  }\n\n  showMessages() {\n    this.showMessage = true;\n  }\n\n  allValid() {\n    for (var key in this.fields) {\n      if (this.fields.hasOwnProperty(key) && this.fields[key] === false) {\n        console.warn(`field ${key} result not match rule`);\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  message(field, value, testString, customClass, customErrors = {}) {\n    this.fields[field] = true;\n    let tests = testString.split('|');\n    let rule, options, message;\n    console.log(value.length);\n\n    for (let i = 0; i < tests.length; i++) {\n      value = this.filterEmptyValue(value);\n      rule = this.getRule(tests[i]);\n      options = this.getOptions(tests[i]);\n\n      if (!this.isValid(value, rule, options)) {\n        this.fields[field] = false;\n\n        if (this.showMessage) {\n          message = customErrors[rule] || customErrors.default || this.rules[rule].message.replace(':attribute', field);\n\n          if (options.length > 0 && this.rules[rule].hasOwnProperty('messageReplace')) {\n            let replaceMessage = this.rules[rule].messageReplace(message, options);\n            return this.createErrorEle(replaceMessage, customClass);\n          }\n\n          return this.createErrorEle(message, customClass);\n        }\n      }\n    }\n  }\n\n  createErrorEle(message, customClass) {\n    return React.createElement('div', {\n      className: customClass || 'error-message',\n      style: {\n        color: 'red',\n        'font-size': '14px'\n      }\n    }, message);\n  }\n\n  filterEmptyValue(value) {\n    return value === undefined || value === null ? '' : value;\n  }\n\n  getRule(rule) {\n    return rule.split(':')[0];\n  }\n\n  getOptions(rule) {\n    let parts = rule.split(':');\n    return parts.length > 1 ? parts[1].split(',') : [];\n  }\n\n  isValid(value, rule, options) {\n    try {\n      return this.rules[rule].rule(value, options);\n    } catch (e) {\n      console.error(`not find your setting rule ${rule}`);\n    }\n  }\n\n}\n\nexport default ReactValidator;","map":{"version":3,"sources":["/Users/chengpeng/workspace/Ft-Official-Website/ft-offical-website/src/modules/delivery/JoinUs/react-validator.js"],"names":["React","utils","testRegex","value","regex","toString","match","rules","required","message","rule","val","max","options","length","messageReplace","replace","min","email","number","phone","url","accepted","ReactValidator","constructor","fields","showMessage","hideMessages","showMessages","allValid","key","hasOwnProperty","console","warn","field","testString","customClass","customErrors","tests","split","log","i","filterEmptyValue","getRule","getOptions","isValid","default","replaceMessage","createErrorEle","createElement","className","style","color","undefined","parts","e","error"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst utils = {\n    testRegex: (value, regex) => value.toString().match(regex),\n\n    rules: {\n      required: {\n        message: 'The :attribute field is required',\n        rule: val => utils.testRegex(val, /.+/),\n      },\n      max: {\n        message: 'The :attribute may not be greater than :max characters',\n        rule: (val, options) => val.length <= options[0],\n        messageReplace: (message, options) => message.replace(':max', options[0]),\n      },\n      min: {\n        message: 'The :attribute may not be greater than :mix characters',\n        rule: (val, options) => val.length >= options[0],       \n        messageReplace: (message, options) => message.replace(':min', options[0]),\n      },\n      email: {\n        message: 'The :attribute must be a valid email address',\n        rule: val => utils.testRegex(val, /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i), \n      },\n      number: {\n        message: 'The :attribute must be a number', \n        rule: (val) => utils.testRegex(val,/^\\d+.?\\d*$/)\n      },\n      phone: {\n        message: 'The :attribute must be a valid phone number', \n        rule: (val) => utils.testRegex(val,/^\\d{10}/)  /* 手机号段：/^1[3|5|7|8]\\d{9}/ */\n      },\n      url: {\n        message: 'The :attribute must be a valid url', \n        rule: (val) => utils.testRegex(val,/^(https?|ftp):\\/\\/(-\\.)?([^\\s/?\\.#-]+\\.?)+(\\/[^\\s]*)?$/i)  \n      },\n      accepted: {\n        message: 'The :attribute must be a accepted', \n        rule: (val) => val === true  \n      }\n    },\n  }\n  \n  class ReactValidator {\n    constructor() {\n      this.fields = []\n      this.rules = utils.rules\n      this.showMessage = false\n    }\n  \n    hideMessages() {\n      this.showMessage = false\n    }\n  \n    showMessages() {\n      this.showMessage = true\n    }\n  \n    allValid() {\n      for (var key in this.fields) {\n        if (this.fields.hasOwnProperty(key) && this.fields[key] === false) {\n          console.warn(`field ${key} result not match rule`)\n          return false\n        }\n      }\n      return true\n    }\n  \n    message(field, value, testString, customClass, customErrors = {}) {\n      this.fields[field] = true\n      let tests = testString.split('|')\n      let rule, options, message\n\n      console.log(value.length)\n\n      for (let i = 0; i < tests.length; i++) {\n        value = this.filterEmptyValue(value)\n        rule = this.getRule(tests[i])\n        options = this.getOptions(tests[i])\n        if (!this.isValid(value, rule, options)) {\n          this.fields[field] = false\n          if (this.showMessage) {\n            message =\n              customErrors[rule] ||\n              customErrors.default ||\n              this.rules[rule].message.replace(':attribute', field)\n  \n            if (\n              options.length > 0 &&\n              this.rules[rule].hasOwnProperty('messageReplace')\n            ) {\n              let replaceMessage = this.rules[rule].messageReplace(\n                message,\n                options,\n              )\n              return this.createErrorEle(replaceMessage, customClass)\n            }\n  \n            return this.createErrorEle(message, customClass)\n          }\n        }\n      }\n    }\n  \n    createErrorEle(message, customClass) {\n      return React.createElement(\n        'div',\n        { className: customClass || 'error-message' ,\n          style: {color:'red', 'font-size': '14px'},\n        },\n        message,\n      )\n    }\n  \n    filterEmptyValue(value) {\n      return value === undefined || value === null ? '' : value\n    }\n  \n    getRule(rule) {\n      return rule.split(':')[0]\n    }\n  \n    getOptions(rule) {\n      let parts = rule.split(':')\n      return parts.length > 1 ? parts[1].split(',') : []\n    }\n\n    isValid(value, rule, options) {\n      try {\n        return this.rules[rule].rule(value, options)\n      }catch(e){\n        console.error(`not find your setting rule ${rule}`)\n      }\n    }\n  }\n\n  export default ReactValidator;"]},"metadata":{},"sourceType":"module"}