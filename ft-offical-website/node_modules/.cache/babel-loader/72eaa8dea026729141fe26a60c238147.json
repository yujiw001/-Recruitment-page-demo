{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\n// Since rollup cannot deal with namespace being a function,\n// this is to interop with TypeScript since `invariant`\n// does not export a default\n// https://github.com/rollup/rollup/issues/1267\nimport * as invariant_ from 'invariant';\nconst invariant = invariant_.default || invariant_;\nimport { createError, escape } from '../utils';\nimport IntlMessageFormat from 'intl-messageformat';\n\nfunction setTimeZoneInOptions(opts, timeZone) {\n  return Object.keys(opts).reduce((all, k) => {\n    all[k] = Object.assign({\n      timeZone\n    }, opts[k]);\n    return all;\n  }, {});\n}\n\nfunction deepMergeOptions(opts1, opts2) {\n  const keys = Object.keys(Object.assign({}, opts1, opts2));\n  return keys.reduce((all, k) => {\n    all[k] = Object.assign({}, opts1[k] || {}, opts2[k] || {});\n    return all;\n  }, {});\n}\n\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\n  if (!timeZone) {\n    return f1;\n  }\n\n  const mfFormats = IntlMessageFormat.formats;\n  return Object.assign({}, mfFormats, f1, {\n    date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)),\n    time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone))\n  });\n}\n\nexport function formatMessage({\n  locale,\n  formats,\n  messages,\n  defaultLocale,\n  defaultFormats,\n  onError,\n  timeZone\n}, state, messageDescriptor = {\n  id: ''\n}, values = {}) {\n  const id = messageDescriptor.id,\n        defaultMessage = messageDescriptor.defaultMessage; // `id` is a required field of a Message Descriptor.\n\n  invariant(id, '[React Intl] An `id` must be provided to format a message.');\n\n  if (!id) {\n    throw new Error('[React Intl] An `id` must be provided to format a message.');\n  }\n\n  const message = messages && messages[id];\n  formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\n  defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\n  let formattedMessageParts = [];\n\n  if (message) {\n    try {\n      const formatter = state.getMessageFormat(message, locale, formats, {\n        formatters: state\n      });\n      formattedMessageParts = formatter.formatHTMLMessage(values);\n    } catch (e) {\n      onError(createError(`Error formatting message: \"${id}\" for locale: \"${locale}\"` + (defaultMessage ? ', using default message as fallback.' : ''), e));\n    }\n  } else {\n    // This prevents warnings from littering the console in development\n    // when no `messages` are passed into the <IntlProvider> for the\n    // default locale, and a default message is in the source.\n    if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {\n      onError(createError(`Missing message: \"${id}\" for locale: \"${locale}\"` + (defaultMessage ? ', using default message as fallback.' : '')));\n    }\n  }\n\n  if (!formattedMessageParts.length && defaultMessage) {\n    try {\n      const formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n      formattedMessageParts = formatter.formatHTMLMessage(values);\n    } catch (e) {\n      onError(createError(`Error formatting the default message for: \"${id}\"`, e));\n    }\n  }\n\n  if (!formattedMessageParts.length) {\n    onError(createError(`Cannot format message: \"${id}\", ` + `using message ${message || defaultMessage ? 'source' : 'id'} as fallback.`));\n\n    if (typeof message === 'string') {\n      return message || defaultMessage || id;\n    }\n\n    return defaultMessage || id;\n  }\n\n  if (formattedMessageParts.length === 1 && typeof formattedMessageParts[0] === 'string') {\n    return formattedMessageParts[0] || defaultMessage || id;\n  }\n\n  return formattedMessageParts;\n}\nexport function formatHTMLMessage(config, state, messageDescriptor = {\n  id: ''\n}, rawValues = {}) {\n  // Process all the values before they are used when formatting the ICU\n  // Message string. Since the formatted message might be injected via\n  // `innerHTML`, all String-based values need to be HTML-escaped.\n  const escapedValues = Object.keys(rawValues).reduce((escaped, name) => {\n    const value = rawValues[name];\n    escaped[name] = typeof value === 'string' ? escape(value) : value;\n    return escaped;\n  }, {});\n  return formatMessage(config, state, messageDescriptor, escapedValues);\n}","map":{"version":3,"sources":["/Users/chengpeng/workspace/Ft-Official-Website/ft-offical-website/node_modules/react-intl/lib/formatters/message.js"],"names":["invariant_","invariant","default","createError","escape","IntlMessageFormat","setTimeZoneInOptions","opts","timeZone","Object","keys","reduce","all","k","assign","deepMergeOptions","opts1","opts2","deepMergeFormatsAndSetTimeZone","f1","mfFormats","formats","date","time","formatMessage","locale","messages","defaultLocale","defaultFormats","onError","state","messageDescriptor","id","values","defaultMessage","Error","message","formattedMessageParts","formatter","getMessageFormat","formatters","formatHTMLMessage","e","toLowerCase","length","config","rawValues","escapedValues","escaped","name","value"],"mappings":"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","sourcesContent":["/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\n// Since rollup cannot deal with namespace being a function,\n// this is to interop with TypeScript since `invariant`\n// does not export a default\n// https://github.com/rollup/rollup/issues/1267\nimport * as invariant_ from 'invariant';\nconst invariant = invariant_.default || invariant_;\nimport { createError, escape } from '../utils';\nimport IntlMessageFormat from 'intl-messageformat';\nfunction setTimeZoneInOptions(opts, timeZone) {\n    return Object.keys(opts).reduce((all, k) => {\n        all[k] = Object.assign({ timeZone }, opts[k]);\n        return all;\n    }, {});\n}\nfunction deepMergeOptions(opts1, opts2) {\n    const keys = Object.keys(Object.assign({}, opts1, opts2));\n    return keys.reduce((all, k) => {\n        all[k] = Object.assign({}, (opts1[k] || {}), (opts2[k] || {}));\n        return all;\n    }, {});\n}\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\n    if (!timeZone) {\n        return f1;\n    }\n    const mfFormats = IntlMessageFormat.formats;\n    return Object.assign({}, mfFormats, f1, { date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)), time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone)) });\n}\nexport function formatMessage({ locale, formats, messages, defaultLocale, defaultFormats, onError, timeZone, }, state, messageDescriptor = { id: '' }, values = {}) {\n    const { id, defaultMessage } = messageDescriptor;\n    // `id` is a required field of a Message Descriptor.\n    invariant(id, '[React Intl] An `id` must be provided to format a message.');\n    if (!id) {\n        throw new Error('[React Intl] An `id` must be provided to format a message.');\n    }\n    const message = messages && messages[id];\n    formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\n    defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\n    let formattedMessageParts = [];\n    if (message) {\n        try {\n            const formatter = state.getMessageFormat(message, locale, formats, {\n                formatters: state,\n            });\n            formattedMessageParts = formatter.formatHTMLMessage(values);\n        }\n        catch (e) {\n            onError(createError(`Error formatting message: \"${id}\" for locale: \"${locale}\"` +\n                (defaultMessage ? ', using default message as fallback.' : ''), e));\n        }\n    }\n    else {\n        // This prevents warnings from littering the console in development\n        // when no `messages` are passed into the <IntlProvider> for the\n        // default locale, and a default message is in the source.\n        if (!defaultMessage ||\n            (locale && locale.toLowerCase() !== defaultLocale.toLowerCase())) {\n            onError(createError(`Missing message: \"${id}\" for locale: \"${locale}\"` +\n                (defaultMessage ? ', using default message as fallback.' : '')));\n        }\n    }\n    if (!formattedMessageParts.length && defaultMessage) {\n        try {\n            const formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n            formattedMessageParts = formatter.formatHTMLMessage(values);\n        }\n        catch (e) {\n            onError(createError(`Error formatting the default message for: \"${id}\"`, e));\n        }\n    }\n    if (!formattedMessageParts.length) {\n        onError(createError(`Cannot format message: \"${id}\", ` +\n            `using message ${message || defaultMessage ? 'source' : 'id'} as fallback.`));\n        if (typeof message === 'string') {\n            return message || defaultMessage || id;\n        }\n        return defaultMessage || id;\n    }\n    if (formattedMessageParts.length === 1 &&\n        typeof formattedMessageParts[0] === 'string') {\n        return formattedMessageParts[0] || defaultMessage || id;\n    }\n    return formattedMessageParts;\n}\nexport function formatHTMLMessage(config, state, messageDescriptor = { id: '' }, rawValues = {}) {\n    // Process all the values before they are used when formatting the ICU\n    // Message string. Since the formatted message might be injected via\n    // `innerHTML`, all String-based values need to be HTML-escaped.\n    const escapedValues = Object.keys(rawValues).reduce((escaped, name) => {\n        const value = rawValues[name];\n        escaped[name] = typeof value === 'string' ? escape(value) : value;\n        return escaped;\n    }, {});\n    return formatMessage(config, state, messageDescriptor, escapedValues);\n}\n"]},"metadata":{},"sourceType":"module"}