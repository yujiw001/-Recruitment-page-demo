{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport { Provider } from './injectIntl';\nimport { createError, DEFAULT_INTL_CONFIG, createFormatters, invariantIntlContext, createIntlCache } from '../utils';\nimport areIntlLocalesSupported from 'intl-locales-supported';\nimport { formatNumber, formatNumberToParts } from '../formatters/number';\nimport { formatRelativeTime } from '../formatters/relativeTime';\nimport { formatDate, formatTime, formatDateToParts, formatTimeToParts } from '../formatters/dateTime';\nimport { formatPlural } from '../formatters/plural';\nimport { formatMessage, formatHTMLMessage } from '../formatters/message';\nimport * as shallowEquals_ from 'shallow-equal/objects';\nimport { formatList } from '../formatters/list';\nconst shallowEquals = shallowEquals_.default || shallowEquals_;\n\nfunction processIntlConfig(config) {\n  return {\n    locale: config.locale,\n    timeZone: config.timeZone,\n    formats: config.formats,\n    textComponent: config.textComponent,\n    messages: config.messages,\n    defaultLocale: config.defaultLocale,\n    defaultFormats: config.defaultFormats,\n    onError: config.onError\n  };\n}\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\n\n\nexport function createIntl(config, cache) {\n  const formatters = createFormatters(cache);\n  const resolvedConfig = Object.assign({}, DEFAULT_INTL_CONFIG, config);\n\n  if (!resolvedConfig.locale || !areIntlLocalesSupported(resolvedConfig.locale)) {\n    const locale = resolvedConfig.locale,\n          defaultLocale = resolvedConfig.defaultLocale,\n          onError = resolvedConfig.onError;\n\n    if (typeof onError === 'function') {\n      onError(createError(`Missing locale data for locale: \"${locale}\". ` + `Using default locale: \"${defaultLocale}\" as fallback.`));\n    } // Since there's no registered locale data for `locale`, this will\n    // fallback to the `defaultLocale` to make sure things can render.\n    // The `messages` are overridden to the `defaultProps` empty object\n    // to maintain referential equality across re-renders. It's assumed\n    // each <FormattedMessage> contains a `defaultMessage` prop.\n\n\n    resolvedConfig.locale = resolvedConfig.defaultLocale || 'en';\n  }\n\n  return Object.assign({}, resolvedConfig, {\n    formatters,\n    formatNumber: formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat),\n    formatNumberToParts: formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat),\n    formatRelativeTime: formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat),\n    formatDate: formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatDateToParts: formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatTime: formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatTimeToParts: formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatPlural: formatPlural.bind(null, resolvedConfig, formatters.getPluralRules),\n    formatMessage: formatMessage.bind(null, resolvedConfig, formatters),\n    formatHTMLMessage: formatHTMLMessage.bind(null, resolvedConfig, formatters),\n    formatList: formatList.bind(null, resolvedConfig, formatters.getListFormat)\n  });\n}\nexport default class IntlProvider extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.cache = createIntlCache();\n    this.state = {\n      cache: this.cache,\n      intl: createIntl(processIntlConfig(this.props), this.cache),\n      prevConfig: processIntlConfig(this.props)\n    };\n  }\n\n  static getDerivedStateFromProps(props, {\n    prevConfig,\n    cache\n  }) {\n    const config = processIntlConfig(props);\n\n    if (!shallowEquals(prevConfig, config)) {\n      return {\n        intl: createIntl(config, cache),\n        prevConfig: config\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    invariantIntlContext(this.state.intl);\n    return React.createElement(Provider, {\n      value: this.state.intl\n    }, this.props.children);\n  }\n\n}\nIntlProvider.displayName = 'IntlProvider';\nIntlProvider.defaultProps = DEFAULT_INTL_CONFIG;","map":{"version":3,"sources":["/Users/chengpeng/workspace/Ft-Official-Website/ft-offical-website/node_modules/react-intl/lib/components/provider.js"],"names":["React","Provider","createError","DEFAULT_INTL_CONFIG","createFormatters","invariantIntlContext","createIntlCache","areIntlLocalesSupported","formatNumber","formatNumberToParts","formatRelativeTime","formatDate","formatTime","formatDateToParts","formatTimeToParts","formatPlural","formatMessage","formatHTMLMessage","shallowEquals_","formatList","shallowEquals","default","processIntlConfig","config","locale","timeZone","formats","textComponent","messages","defaultLocale","defaultFormats","onError","createIntl","cache","formatters","resolvedConfig","Object","assign","bind","getNumberFormat","getRelativeTimeFormat","getDateTimeFormat","getPluralRules","getListFormat","IntlProvider","PureComponent","constructor","arguments","state","intl","props","prevConfig","getDerivedStateFromProps","render","createElement","value","children","displayName","defaultProps"],"mappings":"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","sourcesContent":["/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport { Provider } from './injectIntl';\nimport { createError, DEFAULT_INTL_CONFIG, createFormatters, invariantIntlContext, createIntlCache, } from '../utils';\nimport areIntlLocalesSupported from 'intl-locales-supported';\nimport { formatNumber, formatNumberToParts } from '../formatters/number';\nimport { formatRelativeTime } from '../formatters/relativeTime';\nimport { formatDate, formatTime, formatDateToParts, formatTimeToParts, } from '../formatters/dateTime';\nimport { formatPlural } from '../formatters/plural';\nimport { formatMessage, formatHTMLMessage } from '../formatters/message';\nimport * as shallowEquals_ from 'shallow-equal/objects';\nimport { formatList } from '../formatters/list';\nconst shallowEquals = shallowEquals_.default || shallowEquals_;\nfunction processIntlConfig(config) {\n    return {\n        locale: config.locale,\n        timeZone: config.timeZone,\n        formats: config.formats,\n        textComponent: config.textComponent,\n        messages: config.messages,\n        defaultLocale: config.defaultLocale,\n        defaultFormats: config.defaultFormats,\n        onError: config.onError,\n    };\n}\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\nexport function createIntl(config, cache) {\n    const formatters = createFormatters(cache);\n    const resolvedConfig = Object.assign({}, DEFAULT_INTL_CONFIG, config);\n    if (!resolvedConfig.locale ||\n        !areIntlLocalesSupported(resolvedConfig.locale)) {\n        const { locale, defaultLocale, onError } = resolvedConfig;\n        if (typeof onError === 'function') {\n            onError(createError(`Missing locale data for locale: \"${locale}\". ` +\n                `Using default locale: \"${defaultLocale}\" as fallback.`));\n        }\n        // Since there's no registered locale data for `locale`, this will\n        // fallback to the `defaultLocale` to make sure things can render.\n        // The `messages` are overridden to the `defaultProps` empty object\n        // to maintain referential equality across re-renders. It's assumed\n        // each <FormattedMessage> contains a `defaultMessage` prop.\n        resolvedConfig.locale = resolvedConfig.defaultLocale || 'en';\n    }\n    return Object.assign({}, resolvedConfig, { formatters, formatNumber: formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat), formatNumberToParts: formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat), formatRelativeTime: formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat), formatDate: formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateToParts: formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTime: formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTimeToParts: formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatPlural: formatPlural.bind(null, resolvedConfig, formatters.getPluralRules), formatMessage: formatMessage.bind(null, resolvedConfig, formatters), formatHTMLMessage: formatHTMLMessage.bind(null, resolvedConfig, formatters), formatList: formatList.bind(null, resolvedConfig, formatters.getListFormat) });\n}\nexport default class IntlProvider extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.cache = createIntlCache();\n        this.state = {\n            cache: this.cache,\n            intl: createIntl(processIntlConfig(this.props), this.cache),\n            prevConfig: processIntlConfig(this.props),\n        };\n    }\n    static getDerivedStateFromProps(props, { prevConfig, cache }) {\n        const config = processIntlConfig(props);\n        if (!shallowEquals(prevConfig, config)) {\n            return {\n                intl: createIntl(config, cache),\n                prevConfig: config,\n            };\n        }\n        return null;\n    }\n    render() {\n        invariantIntlContext(this.state.intl);\n        return React.createElement(Provider, { value: this.state.intl }, this.props.children);\n    }\n}\nIntlProvider.displayName = 'IntlProvider';\nIntlProvider.defaultProps = DEFAULT_INTL_CONFIG;\n"]},"metadata":{},"sourceType":"module"}