{"ast":null,"code":"import { getNamedFormat, filterProps, createError } from '../utils';\nconst RELATIVE_TIME_FORMAT_OPTIONS = ['numeric', 'style'];\n\nfunction getFormatter({\n  locale,\n  formats,\n  onError\n}, getRelativeTimeFormat, options = {}) {\n  const format = options.format;\n  const defaults = !!format && getNamedFormat(formats, 'relative', format, onError) || {};\n  const filteredOptions = filterProps(options, RELATIVE_TIME_FORMAT_OPTIONS, defaults);\n  return getRelativeTimeFormat(locale, filteredOptions);\n}\n\nexport function formatRelativeTime(config, getRelativeTimeFormat, value, unit, options = {}) {\n  if (!unit) {\n    unit = 'second';\n  }\n\n  const RelativeTimeFormat = Intl.RelativeTimeFormat;\n\n  if (!RelativeTimeFormat) {\n    config.onError(createError(`Intl.RelativeTimeFormat is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-relativetimeformat\"\n`));\n  }\n\n  try {\n    return getFormatter(config, getRelativeTimeFormat, options).format(value, unit);\n  } catch (e) {\n    config.onError(createError('Error formatting relative time.', e));\n  }\n\n  return String(value);\n}","map":{"version":3,"sources":["/Users/chengpeng/workspace/Ft-Official-Website/ft-offical-website/node_modules/react-intl/lib/formatters/relativeTime.js"],"names":["getNamedFormat","filterProps","createError","RELATIVE_TIME_FORMAT_OPTIONS","getFormatter","locale","formats","onError","getRelativeTimeFormat","options","format","defaults","filteredOptions","formatRelativeTime","config","value","unit","RelativeTimeFormat","Intl","e","String"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,WAAzB,EAAsCC,WAAtC,QAAyD,UAAzD;AACA,MAAMC,4BAA4B,GAAG,CACjC,SADiC,EAEjC,OAFiC,CAArC;;AAIA,SAASC,YAAT,CAAsB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,OAAV;AAAmBC,EAAAA;AAAnB,CAAtB,EAAqDC,qBAArD,EAA4EC,OAAO,GAAG,EAAtF,EAA0F;AAAA,QAC9EC,MAD8E,GACnED,OADmE,CAC9EC,MAD8E;AAEtF,QAAMC,QAAQ,GAAI,CAAC,CAACD,MAAF,IAAYV,cAAc,CAACM,OAAD,EAAU,UAAV,EAAsBI,MAAtB,EAA8BH,OAA9B,CAA3B,IAAsE,EAAvF;AACA,QAAMK,eAAe,GAAGX,WAAW,CAACQ,OAAD,EAAUN,4BAAV,EAAwCQ,QAAxC,CAAnC;AACA,SAAOH,qBAAqB,CAACH,MAAD,EAASO,eAAT,CAA5B;AACH;;AACD,OAAO,SAASC,kBAAT,CAA4BC,MAA5B,EAAoCN,qBAApC,EAA2DO,KAA3D,EAAkEC,IAAlE,EAAwEP,OAAO,GAAG,EAAlF,EAAsF;AACzF,MAAI,CAACO,IAAL,EAAW;AACPA,IAAAA,IAAI,GAAG,QAAP;AACH;;AACD,QAAMC,kBAAkB,GAAGC,IAAI,CAACD,kBAAhC;;AACA,MAAI,CAACA,kBAAL,EAAyB;AACrBH,IAAAA,MAAM,CAACP,OAAP,CAAeL,WAAW,CAAE;;CAAF,CAA1B;AAGH;;AACD,MAAI;AACA,WAAOE,YAAY,CAACU,MAAD,EAASN,qBAAT,EAAgCC,OAAhC,CAAZ,CAAqDC,MAArD,CAA4DK,KAA5D,EAAmEC,IAAnE,CAAP;AACH,GAFD,CAGA,OAAOG,CAAP,EAAU;AACNL,IAAAA,MAAM,CAACP,OAAP,CAAeL,WAAW,CAAC,iCAAD,EAAoCiB,CAApC,CAA1B;AACH;;AACD,SAAOC,MAAM,CAACL,KAAD,CAAb;AACH","sourcesContent":["import { getNamedFormat, filterProps, createError } from '../utils';\nconst RELATIVE_TIME_FORMAT_OPTIONS = [\n    'numeric',\n    'style',\n];\nfunction getFormatter({ locale, formats, onError, }, getRelativeTimeFormat, options = {}) {\n    const { format } = options;\n    const defaults = (!!format && getNamedFormat(formats, 'relative', format, onError)) || {};\n    const filteredOptions = filterProps(options, RELATIVE_TIME_FORMAT_OPTIONS, defaults);\n    return getRelativeTimeFormat(locale, filteredOptions);\n}\nexport function formatRelativeTime(config, getRelativeTimeFormat, value, unit, options = {}) {\n    if (!unit) {\n        unit = 'second';\n    }\n    const RelativeTimeFormat = Intl.RelativeTimeFormat;\n    if (!RelativeTimeFormat) {\n        config.onError(createError(`Intl.RelativeTimeFormat is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-relativetimeformat\"\n`));\n    }\n    try {\n        return getFormatter(config, getRelativeTimeFormat, options).format(value, unit);\n    }\n    catch (e) {\n        config.onError(createError('Error formatting relative time.', e));\n    }\n    return String(value);\n}\n"]},"metadata":{},"sourceType":"module"}